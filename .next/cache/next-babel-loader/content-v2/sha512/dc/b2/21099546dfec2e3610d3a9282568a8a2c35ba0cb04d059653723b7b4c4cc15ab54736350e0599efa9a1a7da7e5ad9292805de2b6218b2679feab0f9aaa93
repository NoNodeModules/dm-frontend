{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport GoogleSVG from \"./google.svg\";\nimport getConfig from \"next/config\";\nimport { useState } from \"react\";\nimport { testLogin, backendLogin } from \"./firebase.auth\";\nimport firebase from \"config/firebase.config\";\nimport { useAuth } from \"contexts/useAuth\";\n\nconst LoginModal = ({\n  active,\n  hide\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(null);\n  const {\n    0: testId,\n    1: setTestId\n  } = useState(\"\");\n  const {\n    refreshAuthContext\n  } = useAuth();\n\n  const authenticateUser = () => {\n    setLoading(\"Authenticating\");\n    firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider()).then(async result => {\n      if (result.user) {\n        result.user.getIdToken().then(idToken => {\n          backendLogin(idToken, result.user).then(response => refreshAuthContext());\n        });\n      }\n    });\n  };\n\n  const authenticateTestUser = () => {\n    setLoading(\"Authenticating Test User\");\n    testLogin().then(response => refreshAuthContext());\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: !loading ? /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"button\", {\n        \"data-testid\": \"login-with-google\",\n        onClick: () => authenticateUser(),\n        className: \"button-google\",\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          className: \"button-icon\",\n          children: /*#__PURE__*/_jsx(GoogleSVG, {\n            size: \"30px\"\n          })\n        }), \"Sign in with Google\"]\n      }), process.env.NEXT_PUBLIC_TEST_LOGIN == \"true\" && /*#__PURE__*/_jsxs(\"div\", {\n        className: \"test-login-container\",\n        children: [/*#__PURE__*/_jsx(\"input\", {\n          \"data-testid\": \"test-login-user\",\n          value: testId,\n          onChange: e => setTestId(e.target.value)\n        }), /*#__PURE__*/_jsx(\"button\", {\n          \"data-testid\": \"test-login-submit\",\n          onClick: () => testLogin(testId).then(resp => {\n            refreshAuthContext();\n          }).catch(error => {\n            setLoading(\"Authentication Failed\");\n          }),\n          children: \"Test Login\"\n        })]\n      })]\n    }) : /*#__PURE__*/_jsx(\"div\", {\n      children: loading\n    })\n  });\n};\n\nexport default LoginModal;","map":null,"metadata":{},"sourceType":"module"}