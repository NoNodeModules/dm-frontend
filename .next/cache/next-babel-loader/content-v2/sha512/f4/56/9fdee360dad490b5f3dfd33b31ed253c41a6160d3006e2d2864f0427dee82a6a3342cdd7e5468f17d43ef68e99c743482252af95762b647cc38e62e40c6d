{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ajay/web/projects/dm-frontend/src/components/auth/login.js\";\nimport GoogleSVG from \"./google.svg\";\nimport getConfig from \"next/config\";\nimport { useState } from \"react\";\nimport { testLogin, backendLogin } from \"./firebase.auth\";\nimport firebase from \"config/firebase.config\";\nimport { useAuth } from \"contexts/useAuth\";\n\nconst LoginModal = ({\n  active,\n  hide\n}) => {\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(null);\n  const {\n    0: testId,\n    1: setTestId\n  } = useState(\"\");\n  const {\n    refreshAuthContext\n  } = useAuth();\n\n  const authenticateUser = () => {\n    setLoading(\"Authenticating\");\n    firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider()).then(async result => {\n      if (result.user) {\n        result.user.getIdToken().then(idToken => {\n          backendLogin(idToken, result.user).then(response => refreshAuthContext());\n        });\n      }\n    });\n  };\n\n  const authenticateTestUser = () => {\n    setLoading(\"Authenticating Test User\");\n    testLogin().then(response => refreshAuthContext());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"login-with-google\",\n        onClick: () => authenticateUser(),\n        className: \"button-google\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"button-icon\",\n          children: /*#__PURE__*/_jsxDEV(GoogleSVG, {\n            size: \"30px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), \"Sign in with Google\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), process.env.NEXT_PUBLIC_TEST_LOGIN == \"true\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-login-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          \"data-testid\": \"test-login-user\",\n          value: testId,\n          onChange: e => setTestId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          \"data-testid\": \"test-login-submit\",\n          onClick: () => testLogin(testId).then(resp => {\n            refreshAuthContext();\n          }).catch(error => {\n            setLoading(\"Authentication Failed\");\n          }),\n          children: \"Test Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\nexport default LoginModal;","map":{"version":3,"sources":["/home/ajay/web/projects/dm-frontend/src/components/auth/login.js"],"names":["GoogleSVG","getConfig","useState","testLogin","backendLogin","firebase","useAuth","LoginModal","active","hide","loading","setLoading","testId","setTestId","refreshAuthContext","authenticateUser","auth","signInWithPopup","GoogleAuthProvider","then","result","user","getIdToken","idToken","response","authenticateTestUser","process","env","NEXT_PUBLIC_TEST_LOGIN","e","target","value","resp","catch","error"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,iBAAxC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAsB;AACvC,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACU,MAAD;AAAA,OAASC;AAAT,MAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAyBR,OAAO,EAAtC;;AACA,QAAMS,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,UAAU,CAAC,gBAAD,CAAV;AACAN,IAAAA,QAAQ,CACLW,IADH,GAEGC,eAFH,CAEmB,IAAIZ,QAAQ,CAACW,IAAT,CAAcE,kBAAlB,EAFnB,EAGGC,IAHH,CAGQ,MAAOC,MAAP,IAAkB;AACtB,UAAIA,MAAM,CAACC,IAAX,EAAiB;AACfD,QAAAA,MAAM,CAACC,IAAP,CAAYC,UAAZ,GAAyBH,IAAzB,CAA+BI,OAAD,IAAa;AACzCnB,UAAAA,YAAY,CAACmB,OAAD,EAAUH,MAAM,CAACC,IAAjB,CAAZ,CAAmCF,IAAnC,CAAyCK,QAAD,IACtCV,kBAAkB,EADpB;AAGD,SAJD;AAKD;AACF,KAXH;AAYD,GAdD;;AAgBA,QAAMW,oBAAoB,GAAG,MAAM;AACjCd,IAAAA,UAAU,CAAC,0BAAD,CAAV;AACAR,IAAAA,SAAS,GAAGgB,IAAZ,CAAkBK,QAAD,IAAcV,kBAAkB,EAAjD;AACD,GAHD;;AAKA,sBACE;AAAA,cACG,CAACJ,OAAD,gBACC;AAAA,8BACE;AACE,uBAAY,mBADd;AAEE,QAAA,OAAO,EAAE,MAAMK,gBAAgB,EAFjC;AAGE,QAAA,SAAS,EAAC,eAHZ;AAAA,gCAKE;AAAM,UAAA,SAAS,EAAC,aAAhB;AAAA,iCACE,QAAC,SAAD;AAAW,YAAA,IAAI,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAWGW,OAAO,CAACC,GAAR,CAAYC,sBAAZ,IAAsC,MAAtC,iBACC;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AACE,yBAAY,iBADd;AAEE,UAAA,KAAK,EAAEhB,MAFT;AAGE,UAAA,QAAQ,EAAGiB,CAAD,IAAOhB,SAAS,CAACgB,CAAC,CAACC,MAAF,CAASC,KAAV;AAH5B;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AACE,yBAAY,mBADd;AAEE,UAAA,OAAO,EAAE,MACP5B,SAAS,CAACS,MAAD,CAAT,CACGO,IADH,CACSa,IAAD,IAAU;AACdlB,YAAAA,kBAAkB;AACnB,WAHH,EAIGmB,KAJH,CAIUC,KAAD,IAAW;AAChBvB,YAAAA,UAAU,CAAC,uBAAD,CAAV;AACD,WANH,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA,oBADD,gBAqCC;AAAA,gBAAMD;AAAN;AAAA;AAAA;AAAA;AAAA;AAtCJ;AAAA;AAAA;AAAA;AAAA,UADF;AA2CD,CApED;;AAsEA,eAAeH,UAAf","sourcesContent":["import GoogleSVG from \"./google.svg\";\nimport getConfig from \"next/config\";\nimport { useState } from \"react\";\nimport { testLogin, backendLogin } from \"./firebase.auth\";\nimport firebase from \"config/firebase.config\";\nimport { useAuth } from \"contexts/useAuth\";\n\nconst LoginModal = ({ active, hide }) => {\n  const [loading, setLoading] = useState(null);\n  const [testId, setTestId] = useState(\"\");\n  const { refreshAuthContext } = useAuth();\n  const authenticateUser = () => {\n    setLoading(\"Authenticating\");\n    firebase\n      .auth()\n      .signInWithPopup(new firebase.auth.GoogleAuthProvider())\n      .then(async (result) => {\n        if (result.user) {\n          result.user.getIdToken().then((idToken) => {\n            backendLogin(idToken, result.user).then((response) =>\n              refreshAuthContext()\n            );\n          });\n        }\n      });\n  };\n\n  const authenticateTestUser = () => {\n    setLoading(\"Authenticating Test User\");\n    testLogin().then((response) => refreshAuthContext());\n  };\n\n  return (\n    <div>\n      {!loading ? (\n        <>\n          <button\n            data-testid=\"login-with-google\"\n            onClick={() => authenticateUser()}\n            className=\"button-google\"\n          >\n            <span className=\"button-icon\">\n              <GoogleSVG size=\"30px\" />\n            </span>\n            Sign in with Google\n          </button>\n          {process.env.NEXT_PUBLIC_TEST_LOGIN == \"true\" && (\n            <div className=\"test-login-container\">\n              <input\n                data-testid=\"test-login-user\"\n                value={testId}\n                onChange={(e) => setTestId(e.target.value)}\n              />\n              <button\n                data-testid=\"test-login-submit\"\n                onClick={() =>\n                  testLogin(testId)\n                    .then((resp) => {\n                      refreshAuthContext();\n                    })\n                    .catch((error) => {\n                      setLoading(\"Authentication Failed\");\n                    })\n                }\n              >\n                Test Login\n              </button>\n            </div>\n          )}\n        </>\n      ) : (\n        <div>{loading}</div>\n      )}\n    </div>\n  );\n};\n\nexport default LoginModal;\n"]},"metadata":{},"sourceType":"module"}