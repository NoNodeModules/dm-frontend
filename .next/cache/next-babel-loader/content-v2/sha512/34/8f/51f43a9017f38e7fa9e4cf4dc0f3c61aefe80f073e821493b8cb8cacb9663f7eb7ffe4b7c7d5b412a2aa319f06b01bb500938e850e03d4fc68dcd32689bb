{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Cookies from \"js-cookie\";\nimport Router from \"next/router\";\nimport { createContext, useContext, useEffect, useReducer } from \"react\";\nimport publicPages from \"components/auth/public-pages\";\nimport axios from \"axios\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst RESET_USER_STATE = \"RESET_USER_STATE\";\nconst initialState = {\n  isLoading: true,\n  isAuthenticated: false,\n  pic: null,\n  fullname: null\n};\n\nconst userReducer = (state, action) => {\n  switch (action.type) {\n    case RESET_USER_STATE:\n      const appCookies = action.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isAuthenticated: appCookies.authenticated,\n        pic: appCookies.pic,\n        fullname: appCookies.fullname && appCookies.fullname.split(\"_\").join(\" \"),\n        isLoading: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const AuthProvider = props => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(userReducer, initialState);\n  useEffect(() => {\n    refreshAuthContext();\n  }, []);\n  useEffect(() => {\n    if (!state.isLoading) {\n      const path = props.appProps.router.route;\n\n      if (path != \"/\" && !state.isAuthenticated && !publicPages.includes(path)) {\n        Router.push(\"/\");\n      }\n    }\n  }, [state.isAuthenticated, state.isLoading]);\n\n  const refreshAuthContext = () => {\n    dispatch({\n      type: RESET_USER_STATE,\n      payload: Cookies.get()\n    });\n  };\n\n  const logout = () => {\n    axios({\n      url: process.env.NEXT_PUBLIC_MIDDLEWARE_URL + \"/session/logout\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true\n    }).then(res => {\n      refreshAuthContext();\n    });\n  };\n\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: {\n      refreshAuthContext,\n      logout,\n      isLoading: state.isLoading,\n      isAuthenticated: state.isAuthenticated,\n      pic: state.pic,\n      fullname: state.fullname\n    },\n    children: props.children\n  });\n};\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};","map":null,"metadata":{},"sourceType":"module"}